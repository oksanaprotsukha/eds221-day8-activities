---
title: "EDS221_Day8_activities"
author: "OP"
format: html
editor: visual
---

```{r}
library(janitor)
library(tidyverse)

# --- libraries to create charts
library(patchwork)
library(ggrepel)
library(gghighlight)
library(paletteer)
library(gapminder)
library(sf)
```

## Task 1: Do your data viz worst

Once you're done, drop your worst graph (as a .png or .jpg) into the course Slack channel.

Some ideas:

**Once you're done, drop your worst graph (as a .png or .jpg) into the course Slack channel.**

Some ideas:

-   fonts
-   background images
-   coord\_\*
-   panel / plot / geom / text colors
-   point / line patterns and shapes
-   gridline updates
-   tickmark frequency
-   angles

```{r}
space_launches_dataset <- read_csv(here::here("data", "space_launches.csv"))
```

```{r}
space_launches_dataset_plot <- space_launches_dataset %>% 
  drop_na(launch_year) %>% 
  group_by(agency_type, launch_year) %>% 
  mutate(count_launches_by_agency = n()) %>% 
  ggplot(aes(x = launch_year, y = count_launches_by_agency, fill = agency_type, labels(label_value(launch_year, multi_line = TRUE))))+
  geom_col()+
  geom_text(aes(label = count_launches_by_agency),    # Adding labels on top of each bar
            vjust = -0.5, hjust = 0.5, size = 3)
  #scale_fill_paletteer_d(palette = "palettetown::croconaw")+
  theme(panel.background = element_rect(color = "navy", size = 5, fill = "lightblue"),
        plot.background = element_rect(fill = "yellow"),
        axis.text.x = element_text(color = "blue"),
        axis.text.y = element_text(color = "blue")
        )+
    annotate("text", 
             x = 2004, 
             y = 3000, 
             angle = 90, 
             label = "!Falcon 1!", 
             size = 4,
             color = "red")+
    geom_vline(xintercept = 2006, 
               linetype = "longdash", 
               color = "red", 
               size = 2)+
scale_fill_paletteer_d(palette = "palettown::croconaw")


```

```{r}
space_launches_dataset_plot
```

```{r}
space_launches_dataset_clean <- space_launches_dataset %>% 
  drop_na(launch_year) %>% 
  group_by(agency_type, launch_year) %>% 
  mutate(count_launches_by_agency = n()) %>% 
  relocate(count_launches_by_agency, .after = launch_year) %>% 
  relocate(agency_type, .after = count_launches_by_agency) %>% 
  select(launch_year,count_launches_by_agency, agency_type)
```

```{r}
library(ggforce)
library(emojifont)
library(gridExtra)
library(ggplot2)
library(egg)

my_beautifully_ugly_graph <- ggplot(data = space_launches_dataset_clean, aes(x = launch_year, y = count_launches_by_agency, fill = agency_type)) +
  geom_col(
    aes(group = agency_type),
    position = "dodge"
  )+
  geom_text(aes(label = count_launches_by_agency,
                group = agency_type),
            position = position_dodge(width = 1),
            vjust = -0.5, size = 2, color = 'navy')+
  # legend
  theme(
  # Change legend background color
  legend.background = element_rect(fill = "yellow"),
  legend.key = element_rect(fill = "white", color = NA),
  # Change legend key size and key width
  legend.key.size = unit(1.5, "cm"),
  legend.key.width = unit(0.5,"cm")
  )+
  # Edit legend title and labels
  scale_fill_discrete(labels = c("private", "STARTUP", "public"))+
  # Annotate startup launches with eclipse
  geom_mark_ellipse(data = space_launches_dataset_clean %>% 
                    filter(agency_type == "startup"),
                    aes(fill = agency_type,
                        label = agency_type),
                    expand = unit(0.5, "mm"),
                    # remove legend for the geom_mark_ellipse chart
                    show_guide = FALSE)+
  # add a marker line to define a year when the 1st rocket startup was launched
  annotate("text",
           x = 2000.5,
           y = 120,
           angle = 45,
           label = emoji('rocket'), cex=25, col='steelblue', family='EmojiOne') +
  annotate("text",
           x = 2003.5,
           y = 63,
           angle = 90,
           size = 5,
           label = "!Falcon1!", col='red')+
  geom_vline(xintercept = 2006,  # Update this to the appropriate x-coordinate
             linetype = "longdash",
             color = "steelblue",
             size = 1.5)+
    theme(panel.background = element_rect(color = "navy",
                                          size = 5,
                                          fill = "yellow"),
        #plot.background = element_rect(fill = "white"),
        panel.grid.major = element_line(color = "lightgrey"),
        axis.text.x = element_text(color = "navy"),
        axis.text.y = element_text(color = "navy"))

#print(my_beautifully_ugly_graph)
# save the graph as an image preserving the original dimensions

#to view the plot
gridExtra::grid.arrange(egg::set_panel_size(p = my_beautifully_ugly_graph, width=unit(8, "cm"), height=unit(8, "cm")))

#to save the plot
#ggsave(filename = "myplot.pdf", plot = egg::set_panel_size(p=p, width=unit(8, "cm"), height=unit(8, "cm")))

#ggsave(here::here("figs", "my_beautifully_ugly_graph.png", plot = egg::set_panel_size(p=my_beautifully_ugly_graph, width=unit(8, "cm"), height=unit(8, "cm"))))

ggsave(filename = "my_beautifully_ugly_graph.png", plot = egg::set_panel_size(p=my_beautifully_ugly_graph, width=unit(8, "cm"), height=unit(8, "cm")))
```

## Task 2: Wrangling practice with the SF Greenhouse Gas data

Download the San_Francisco_Communitywide_Greenhouse_Gas_Inventory.csv file (I'll put this in Slack). Information about the data is available here.

Read in the SF emissions dataset, then complete the following:

Create a summary table of total annual greenhouse gas emissions (only from Emissions_mtCO2e column) by sector_general

Create a summary table of total annual greenhouse gas emissions (only from Emissions_mtCO2e column) by year and commodity type

Create a subset of the data that only contains observations from 2005 on, only for observations where Sector_Detail2 contains the pattern "PG&E", then limit to columns Calendar_Year, Sector_Detail2 and Emissions_mtCO2e.

```{r}
San_Francisco_Communitywide_Greenhouse_Gas_Inventory <- read_csv(here::here("data", "San_Francisco_Communitywide_Greenhouse_Gas_Inventory.csv"))
```

```{r}
emissions_mtCO2e_summary_sector <- San_Francisco_Communitywide_Greenhouse_Gas_Inventory %>% 
  group_by(Sector_General) %>% 
  summarise(Emissions_mtCO2e_total = n())
```

```{r}
# Create a summary table of total annual greenhouse gas emissions (only from Emissions_mtCO2e column) by year and commodity type

emissions_mtCO2e_summary_commodity <- San_Francisco_Communitywide_Greenhouse_Gas_Inventory %>% 
  group_by(Commodity_Type) %>% 
  summarise(Emissions_mtCO2e_total = n())
```

```{r}
# Create a subset of the data that only contains observations from 2005 on, only for observations where Sector_Detail2 contains the pattern "PG&E", then limit to columns Calendar_Year, Sector_Detail2 and Emissions_mtCO2e.

emissions_mtCO2e_2005 <- San_Francisco_Communitywide_Greenhouse_Gas_Inventory  %>% 
  filter(Calendar_Year == 2005, str_detect(Sector_Detail2, pattern = "PG&E")) %>% 
  select(Calendar_Year, Sector_Detail2, Emissions_mtCO2e)
```

## Task 3: Do your data viz best

Create a finalized graph (as perfect as you can make it) using the San Francisco GHG emissions dataset. **You** get to choose what you want to visualize. You can pick which variables & observations you\'re interested in. You may want to do some wrangling / summarizing first.

Once you\'ve decided on what to plot, create the best graph that you can to communicate what\'s going on with the data.

```{r}
# TEST: expected emissions for Transportation sector for the period "2010-2019"
sf_emissions_1 <- San_Francisco_Communitywide_Greenhouse_Gas_Inventory %>% 
  mutate("Period" = case_when(
    Calendar_Year < 2000~ "1990-1999",
    (Calendar_Year >= 2000 & Calendar_Year <= 2010) ~ "2000-2010",
    Calendar_Year > 2010 ~ "2010-2019"
  )) %>% 
  relocate(Period, .before = "Calendar_Year") %>% 
  filter(Sector_General == "Transportation" & Period == "2010-2019") %>% 
  drop_na(Emissions_mtCO2e) %>% 
  summarise(Total_Emissions_mtCO2e_Transportation = sum(Emissions_mtCO2e))

print(sf_emissions_1)
```

```{r}
sf_emissions <- San_Francisco_Communitywide_Greenhouse_Gas_Inventory %>% 
  mutate("Period" = case_when(
    Calendar_Year < 2000~ "1990-1999",
    (Calendar_Year >= 2000 & Calendar_Year <= 2010) ~ "2000-2010",
    Calendar_Year > 2010 ~ "2010-2019"
  )) %>% 
  relocate(Period, .before = "Calendar_Year") %>% 
  drop_na(Emissions_mtCO2e) %>% 
  group_by(Period, Sector_General) %>% 
  summarise(Total_Emissions_mtCO2e_By_Sector = sum(Emissions_mtCO2e)) %>% 

# ggplot
  ggplot(aes(x = fct_reorder(Period,Total_Emissions_mtCO2e_By_Sector),
             y = Total_Emissions_mtCO2e_By_Sector,
             fill = Sector_General))+
  geom_bar(stat="identity")+
  geom_text(size=5,hjust=1.5)+
  coord_flip()
  # geom_bar(
  #   aes(group = Sector_General),
  #   stat='identity',
  #   position = 'dodge',
  #   show_guide = none)+
  # geom_text_repel(
  #   aes(label = Sector_General),
  #   nudge_x = 0.45,
  #   nudge_y = 0.1,
  #   check_overlap = T,
  #   size = 5

)

#   ggplot(df,aes(x,freq,label=freq))+
#   geom_bar(stat="identity")+
#   geom_text(size=5,hjust=1.5)+
#   coord_flip()


print(sf_emissions)

# ggplot(data) + 
#   geom_bar(
#     aes(x = name, y = count, fill = week, group = week), 
#     stat='identity', position = 'dodge'
#   ) +
#   geom_text(
#     aes(x = name, y = count, label = count, group = week), 
#     hjust = -0.5, size = 2,
#     position = position_dodge(width = 1),
#     inherit.aes = TRUE
#   ) + 
#   coord_flip() + 
#   theme_bw()

```

```{r}
data_plot <- data_frame(name = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), count = c(10, 20, 5, 40, 15))

ggplot(data_plot) + 
  geom_col(
    aes(x = name, y = count, fill = name, group = name), 
    position = 'dodge'
  ) +
  geom_text(
    aes(x = name, y = count, label = count, group = name),
    position = position_dodge(width = 1),
    vjust = -0.5, size = 2
  ) + 
  theme_bw()
```
